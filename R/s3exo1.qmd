---
title: "Exercice 01 semaine 3"
format:
  html:
    theme: united
    toc: true
    toc_float:
      collapsed: false
      smooth_scroll: true
---

```{r}
library(devtools)
library(jsonlite)
library(dplyr)
library(tidyr)
library(usethis)
library(testthat)
```

## Q2

Il n'est pas nécessaire d'installer explicitement usethis car cette librairie est déjà installée avec la dernière version de R

## Q3

```{r}
arrets_tan <- jsonlite::fromJSON("https://open.tan.fr/ewp/arrets.json")
arrets_tan <- arrets_tan[,-3]


arrets_tan_filtre <- arrets_tan %>% unnest(ligne, keep_empty = TRUE)

```

**`unnest`** de la librairie **`tidyr`** permet de développer une colonne d'un data.frame en plusieurs lignes, ce qui est ce que vous voulez ici pour la colonne **`ligne`**. L'argument **`keep_empty = TRUE`**, permet de conservez les lignes dans lesquelles la colonne **`ligne`** est vide ou nulle.

Exécutez le script. Quel nouveau dossier a été créé à la racine ?

Un dossier "data" a été créé à la racine avec un fichier .rda

Documentation de la table

```{r}
#' Stops Data from TAN Public API
#'
#' A subset of data from the TAN Public API
#'
#' @format
#' A data frame with 2838 rows and 3 columns:
#' \describe{
#' \item{codeLieu}{Stop code}
#' \item{libelle}{Stop name}
#' \item{ligne}{Line number}
#' }
#' @source https://open.tan.fr/ewp/arrets.json
```

## Q4

```{r}
#' @title is_station
#' @description The function takes an alphabetic code as input and returns a logical value indicating whether the station exists.
#' @param code Character string representing the station code.
#' @return A logical value indicating whether the station exists.
#' @examples
#' is_station("ABCH")
#' is_station("MONERO")

is_station <- function(code) {
  exists <- code %in% arrets_tan$codeLieu
  return(exists)
}

usethis::use_test
is_station("ABCH")
is_station("MONERO")
```

## Q5

```{r}

#' @title find_closest_name
#' @description The function takes two inputs, input and list_stations. It calculates the Levenshtein distance between the input and all elements of list_stations. The station with the smallest distance is considered the closest station and is returned. If the distance to the nearest station is 0, it means that the input is exactly equal to the station name and the station name is returned. If the distance is less than or equal to the length of the entry, the nearest station is returned. Otherwise, NA is returned.
#' @import stringdist
#' @param input A string representing the input value.
#' @param list_stations A vector of strings representing station names.
#' @return A string or NA, representing the name of the nearest station or NA if no close match is found.

find_closest_name <- function(input, list_stations) {
  library(stringdist)
  closest_stations <- stringdist(input, list_stations, method = "lv")
  closest_station_index <- which.min(closest_stations)
  closest_station_name <- list_stations[closest_station_index]
  if (closest_stations[closest_station_index] == 0) {
    closest_station_name
  } else if (closest_stations[closest_station_index] <= nchar(input)) {
    closest_station_name
  } else {
    NA
  }
}

```

###  test unitaires

```{r}
test_that("find_closest_name function works", {
  # Test 1: Check if correct station is returned for exact match
  input1 <- "Abel Durand"
  list_station1 <- c("Abel Durand", "Avenue Blanche", "Adrienne Bolland")
  result1 <- find_closest_name(input1, list_station1)
  expect_equal(result1, "Abel Durand")
  
  # Test 2: Check if correct station is returned for misspelled name
  input2 <- "Abel Durrand"
  list_station2 <- c("Abel Durand", "Avenue Blanche", "Adrienne Bolland")
  result2 <- find_closest_name(input2, list_station2)
  expect_equal(result2, "Abel Durand")
  
  # Test 3: Check if correct station is returned for name with added letters
  input3 <- "Abbé Cherrel"
  list_station3 <- c("Abbé Chérel", "Avenue Blanche", "Adrienne Bolland")
  result3 <- find_closest_name(input3, list_station3)
  expect_equal(result3, "Abbé Chérel")
  
  # Test 4: Check if correct station is returned for name with missing letters
  input4 <- "Adrn Bolland"
  list_station4 <- c("Abbé Chérel", "Avenue Blanche", "Adrienne Bolland")
  result4 <- find_closest_name(input4, list_station4)
  expect_equal(result4, "Adrienne Bolland")
  

})
```

Lorsque l'on run "?find_closest_name()" nous avons la documentation de la fonction.

## Q6

```{r}

#' @title get_waiting_time
#' @description Retrieves information about the waiting time of the next trams
#' @param locationcode The station code for which the waiting time for the next trams is required
#' @return A dataframe with information on the terminus and the time of the next trams
get_waiting_time <- function(codeLieu) {
  library(jsonlite)
  api_url <- paste0("https://open.tan.fr/ewp/tempsattente.json/", codeLieu)
  api_response <- fromJSON(api_url)

  api_response_subset <- api_response[c("terminus", "temps")]
  return(api_response_subset)
}
```

## Q7

```{r}
#' @title get_next_transport at Nantes
#' @description This function allows you to obtain information on the schedules of the next trams
#' @param input A character string representing the full station name, the "libelle"
#' @examples get_next_transport("Bourgeonnière")
#' 1      Orvault Grand Val   2mn
#' @return A data frame of the next passages for all lines passing through the station



get_next_transport <- function(arret) {
  station_libelle <- find_closest_name(arret, arrets_tan$libelle)
  print(paste0("La station que vous cherchez semble être : ", station_libelle))
  output = as.character(unlist(station_libelle))
  output2 = subset(arrets_tan, libelle == output, select = c(codeLieu))
  output3 = lapply(output2, function(x) x[1])
  output4 = as.character(unlist(output3))
  next_passages <- get_waiting_time(output4)
  print('Voici la liste des prochains passages : ')
  return(next_passages)
}
```

## Q9



```{r}
library(infotan)

get_next_transport("commerce")
get_next_transport("Morr")
```

Quand on demande "Morr" il affiche "Coty" et c'est bien normal car il y a "seulement" 3 lettres de différences avec "Coty".
Après je sais pas si il fallait qu'il détecte que ça soit un codelieu et que par conséquent l'objectif était de trouvé "morrhonnière petit port"



